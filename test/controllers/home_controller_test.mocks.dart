// Mocks generated by Mockito 5.2.0 from annotations
// in todo_app/test/controllers/home_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/app/code/error/failure.dart' as _i6;
import 'package:todo_app/app/data/datasources/todo_local_db.dart' as _i2;
import 'package:todo_app/app/data/models/todo_model.dart' as _i7;
import 'package:todo_app/app/data/repositories/todo_repository_impl.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTodoLocalDataSource_0 extends _i1.Fake
    implements _i2.TodoLocalDataSource {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [TodoRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepositoryImpl extends _i1.Mock
    implements _i4.TodoRepositoryImpl {
  MockTodoRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodoLocalDataSource get localDataSource => (super.noSuchMethod(
      Invocation.getter(#localDataSource),
      returnValue: _FakeTodoLocalDataSource_0()) as _i2.TodoLocalDataSource);
  @override
  _i5.Future<_i3.Either<_i6.Failure, int>> addTodo(_i7.TodoModel? todo) =>
      (super.noSuchMethod(Invocation.method(#addTodo, [todo]),
              returnValue: Future<_i3.Either<_i6.Failure, int>>.value(
                  _FakeEither_1<_i6.Failure, int>()))
          as _i5.Future<_i3.Either<_i6.Failure, int>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> deleteTodo(_i7.TodoModel? todo) =>
      (super.noSuchMethod(Invocation.method(#deleteTodo, [todo]),
              returnValue: Future<_i3.Either<_i6.Failure, bool>>.value(
                  _FakeEither_1<_i6.Failure, bool>()))
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.TodoModel>> findTodo(String? name) =>
      (super.noSuchMethod(Invocation.method(#findTodo, [name]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.TodoModel>>.value(
                  _FakeEither_1<_i6.Failure, _i7.TodoModel>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.TodoModel>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.TodoModel>>> fetchTodo(
          {int? complete}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchTodo, [], {#complete: complete}),
              returnValue:
                  Future<_i3.Either<_i6.Failure, List<_i7.TodoModel>>>.value(
                      _FakeEither_1<_i6.Failure, List<_i7.TodoModel>>()))
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.TodoModel>>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> updateTodo(_i7.TodoModel? todo) =>
      (super.noSuchMethod(Invocation.method(#updateTodo, [todo]),
              returnValue: Future<_i3.Either<_i6.Failure, bool>>.value(
                  _FakeEither_1<_i6.Failure, bool>()))
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
